import os
import logging
import requests
import json
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ Telegram –±–æ—Ç–∞
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
CLUB_ID = int(os.getenv("CLUB_ID", 1))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_GROUP_ID = int(os.getenv("ALLOWED_GROUP_ID"))  # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

# üîπ –í—Å–µ UUID –ü–ö –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
PC_UUIDS = {
    1: "03560274-043C-05E0-6906-F30700080009",
    2: "03560274-043C-05E0-6906-B70700080009",
    3: "03560274-043C-05E0-6906-F10700080009",
    4: "03560274-043C-05E0-6906-EF0700080009",
    5: "03560274-043C-05E0-6A06-040700080009",
    6: "03560274-043C-05E0-6A06-140700080009",
    7: "03560274-043C-05E0-6D06-2C0700080009",
    8: "03560274-043C-05E0-6A06-CB0700080009",
    9: "03560274-043C-05E0-6A06-120700080009",
    10: "03560274-043C-05E0-6A06-110700080009",
    11: "03560274-043C-05E0-6C06-D50700080009",
    12: "03560274-043C-05E0-6A06-160700080009",
    13: "03560274-043C-05E0-6A06-950700080009",
    14: "03560274-043C-05E0-6C06-850700080009",
    15: "03560274-043C-05E0-6A06-CC0700080009",
    16: "03560274-043C-05E0-6D06-7D0700080009",
    17: "03560274-043C-05E0-6A06-190700080009",
    18: "03560274-043C-05E0-6906-F20700080009",
    19: "03560274-043C-05E0-6C06-840700080009",
    20: "03560274-043C-05E0-6C06-930700080009",
    21: "03560274-043C-05E0-6906-B50700080009",
    22: "03560274-043C-05E0-6C06-350700080009",
    23: "03560274-043C-05E0-6A06-9D0700080009",
    24: "03560274-043C-05E0-6A06-960700080009",
    25: "03560274-043C-05E0-6A06-940700080009",
    26: "03560274-043C-05E0-6A06-CF0700080009",
    27: "03560274-043C-05E0-6C06-A80700080009",
    28: "03560274-043C-05E0-6A06-130700080009",
    29: "03560274-043C-05E0-6C06-340700080009",
    30: "03560274-043C-05E0-6A06-AD0700080009"
}

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def switch_to_tech_mode(pc_uuid):
    headers = {
        "X-API-KEY": API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "club_id": CLUB_ID,
        "command": "tech_start",
        "type": "free",
        "uuids": [pc_uuid]
    }

    json_payload = json.dumps(payload, ensure_ascii=False)

    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {API_URL}")
    logging.info(f"üîë –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")

    print("\n=== –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–ô JSON –í API ===")
    print(json_payload)
    print("================================\n")

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()

        response_data = response.json()
        response_text = json.dumps(response_data, indent=2, ensure_ascii=False)
        logging.info(f"üì© –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logging.info(f"üìä API –æ—Ç–≤–µ—Ç (—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π JSON):\n{response_text}")

        return response.status_code, response_data
    except requests.exceptions.RequestException as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        return 500, {"message": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}"}

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    chat_id = update.message.chat_id  # ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã)
    chat_type = update.message.chat.type  # –¢–∏–ø —á–∞—Ç–∞ (private / group / supergroup)

    # ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–õ–°)
    if chat_type == "private":
        logging.warning(f"‚ö† –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –õ–ò–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.full_name}, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
        return  # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –í–°–ï –≥—Ä—É–ø–ø—ã, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π
    if chat_id != ALLOWED_GROUP_ID:
        logging.warning(f"‚ö† –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ù–ï–†–ê–ó–†–ï–®–Å–ù–ù–û–ô –≥—Ä—É–ø–ø–µ (ID: {chat_id}). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return  # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "teh" –∏ –¥–∞–ª—å—à–µ –∏–¥—ë—Ç —á–∏—Å–ª–æ
    if message.startswith("teh") and message[3:].isdigit():
        pc_number = int(message[3:])
        if pc_number in PC_UUIDS:
            pc_uuid = PC_UUIDS[pc_number]
            logging.info(f"üñ• –ü–µ—Ä–µ–≤–æ–¥ –ü–ö {pc_number} (UUID: {pc_uuid}) –≤ —Ç–µ—Ö. —Ä–µ–∂–∏–º")

            status_code, response = await switch_to_tech_mode(pc_uuid)

            if status_code == 200 and response.get("status") is True:
                await update.message.reply_text(f"‚úÖ –ü–ö {pc_number} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ç–µ—Ö. —Ä–µ–∂–∏–º.", quote=False)
            else:
                error_message = response.get("message", "–û—à–∏–±–∫–∞ API")
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ü–ö {pc_number}: {error_message}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", quote=False)
        else:
            await update.message.reply_text(f"‚ùå –ü–ö {pc_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.", quote=False)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `teh<N>`, –≥–¥–µ `N` ‚Äî –Ω–æ–º–µ—Ä –ü–ö.", quote=False)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    main()
