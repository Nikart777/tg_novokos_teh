import os
import logging
import requests
import json
import asyncio
import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ Telegram –±–æ—Ç–∞
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
CLUB_ID = int(os.getenv("CLUB_ID", 1))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_GROUP_ID = int(os.getenv("ALLOWED_GROUP_ID"))  # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

# üîπ –í—Å–µ UUID –ü–ö –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
PC_UUIDS = {
    1: "03560274-043C-05E0-6906-F30700080009",
    2: "03560274-043C-05E0-6906-B70700080009",
    3: "03560274-043C-05E0-6906-F10700080009",
    4: "03560274-043C-05E0-6906-EF0700080009",
    5: "03560274-043C-05E0-6A06-040700080009",
    6: "03560274-043C-05E0-6A06-140700080009",
    7: "03560274-043C-05E0-6D06-2C0700080009",
    8: "03560274-043C-05E0-6A06-CB0700080009",
    9: "03560274-043C-05E0-6A06-120700080009",
    10: "03560274-043C-05E0-6A06-110700080009",
    11: "03560274-043C-05E0-6C06-D50700080009",
    12: "03560274-043C-05E0-6A06-160700080009",
    13: "03560274-043C-05E0-6A06-950700080009",
    14: "03560274-043C-05E0-6C06-850700080009",
    15: "03560274-043C-05E0-6A06-CC0700080009",
    16: "03560274-043C-05E0-6D06-7D0700080009",
    17: "03560274-043C-05E0-6A06-190700080009",
    18: "03560274-043C-05E0-6906-F20700080009",
    19: "03560274-043C-05E0-6C06-840700080009",
    20: "03560274-043C-05E0-6C06-930700080009",
    21: "03560274-043C-05E0-6906-B50700080009",
    22: "03560274-043C-05E0-6C06-350700080009",
    23: "03560274-043C-05E0-6A06-9D0700080009",
    24: "03560274-043C-05E0-6A06-960700080009",
    25: "03560274-043C-05E0-6A06-940700080009",
    26: "03560274-043C-05E0-6A06-CF0700080009",
    27: "03560274-043C-05E0-6C06-A80700080009",
    28: "03560274-043C-05E0-6A06-130700080009",
    29: "03560274-043C-05E0-6C06-340700080009",
    30: "03560274-043C-05E0-6A06-AD0700080009"
}

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def switch_to_tech_mode(pc_uuid):
    headers = {
        "X-API-KEY": API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "club_id": CLUB_ID,
        "command": "tech_start",
        "type": "free",
        "uuids": [pc_uuid]
    }

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        return response.status_code, response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        return 500, {"message": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}"}

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    chat_id = update.message.chat_id  
    chat_type = update.message.chat.type  

    if chat_type == "private" or chat_id != ALLOWED_GROUP_ID:
        return  

    if message.startswith("!") and message[1:].startswith("teh") and message[4:].isdigit():
        pc_number = int(message[4:])
        if pc_number in PC_UUIDS:
            pc_uuid = PC_UUIDS[pc_number]
            status_code, response = await switch_to_tech_mode(pc_uuid)

            if status_code == 200 and response.get("status") is True:
                await update.message.reply_text(f"‚úÖ –ü–ö {pc_number} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ç–µ—Ö. —Ä–µ–∂–∏–º.", quote=False)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('message', '–û—à–∏–±–∫–∞')}", quote=False)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    reminder_text = (
        "üì¢ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n"
        "–°–µ–≥–æ–¥–Ω—è –≤ *10:00* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —É–±–æ—Ä–∫—É –ø–æ –ø–ª–∞–Ω—É:\n\n"
        "‚úÖ *–ú—ã—à–∫–∏, –Ω–∞—É—à–Ω–∏–∫–∏* ‚Äì –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å –≤–ª–∞–∂–Ω—ã–º–∏ —Å–∞–ª—Ñ–µ—Ç–∫–∞–º–∏ üßº\n"
        "‚úÖ *–ú–æ–Ω–∏—Ç–æ—Ä—ã* ‚Äì –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞ 10 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —ç–∫—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏–ª–∏ —Å–∞–ª—Ñ–µ—Ç–∫–∞–º–∏ üñ•‚ú®\n"
        "‚úÖ *–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã* ‚Äì –ø—Ä–æ–¥—É—Ç—å –≤–æ–∑–¥—É—Ö–æ–¥—É–≤–∫–æ–π –Ω–∞–¥ –ø–æ–ª–æ–º üí®‚å®\n"
        "‚úÖ *–î–≤–µ—Ä—Ü–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞* ‚Äì –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å–æ —Å—Ä–µ–¥—Å—Ç–≤–æ–º –¥–ª—è —Å—Ç–µ–∫–ª–∞ üß¥üö™\n"
        "‚úÖ *–î–∂–æ–π—Å—Ç–∏–∫–∏ PS5* ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤–ª–∞–∂–Ω—ã–º–∏ —Å–∞–ª—Ñ–µ—Ç–∫–∞–º–∏ üéÆüßΩ\n\n"
        "üí° *–ß–∏—Å—Ç–æ—Ç–∞ –∫–ª—É–±–∞ ‚Äì –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö!*"
    )
    await context.bot.send_message(chat_id=ALLOWED_GROUP_ID, text=reminder_text, parse_mode="Markdown")

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_reminders(application: Application):
    now = datetime.datetime.now()
    first_run = now.replace(hour=10, minute=0, second=0, microsecond=0)

    if now > first_run:
        first_run += datetime.timedelta(days=1)

    while first_run.weekday() not in [0, 2, 4]:  
        first_run += datetime.timedelta(days=1)

    delay = (first_run - now).total_seconds()
    logging.info(f"‚è≥ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {delay / 3600:.2f} —á–∞—Å–æ–≤")

    await asyncio.sleep(delay)

    while True:
        if datetime.datetime.now().weekday() in [0, 2, 4]:  
            await send_reminder(application.bot)
        await asyncio.sleep(86400)  

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    loop = asyncio.get_event_loop()
    loop.create_task(schedule_reminders(application))  

    application.run_polling()

if __name__ == "__main__":
    main()
